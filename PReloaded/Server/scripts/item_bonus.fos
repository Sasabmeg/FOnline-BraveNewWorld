// Item bonuses
//

#include "_defines.fos"
#include "_macros.fos"

#ifdef __CLIENT // Macro defined in client_main.fos
#define Item    ItemCl
#endif

//  shared between client and server scripts

// Returns the number of item bonuses
uint BonusNumber(Item@ it)
{
	uint number=0;
	if(it.Val4!=0) return 5;
	else if(it.Val3!=0) return 4;
	else if(it.Val2!=0) return 3;
	else if(it.Val1!=0) return 2;
	else if(it.Val0!=0) return 1;
	else return 0;
}

//  this part is not shared with client, server only

#ifndef __CLIENT

import void   SetLexem(Item& item, string& lex, string& value) from "lexems";

int CheckBonus( Item@ item, int bonusType )
{
	if( valid(item) )
	{
		if( item.Val0 == bonusType ) return item.Val5;
		if( item.Val1 == bonusType ) return item.Val6;
		if( item.Val2 == bonusType ) return item.Val7;
		if( item.Val3 == bonusType ) return item.Val8;
		if( item.Val4 == bonusType ) return item.Val9;
	}

	return( 0 );
}

//used to add bonuses to gear used by raiders in farm locations
void AddSpecialBonusRaidersFarm(Item@ it)
{
	if(it.GetType() == ITEM_TYPE_WEAPON && !it.IsStackable())
	{
	int roll = Random(0,99);
	if(roll>=0) AddWeaponBonus(it, 1, true); // 100%
	if(roll>34)	AddWeaponBonus(it, 2, true); // 65%
	if(roll>59)	AddWeaponBonus(it, 3, true); // 40%
	if(roll>74)	AddWeaponBonus(it, 4, true); // 25%
	if(roll>84) AddWeaponBonus(it, 5, true); // 15%
	}

	else if(it.GetType() == ITEM_TYPE_ARMOR)
	{
	int roll = Random(0,99);
	if(roll>=0) AddArmorBonus(it, 1);
	if(roll>34)	AddArmorBonus(it, 2);
	if(roll>59)	AddArmorBonus(it, 3);
	if(roll>74)	AddArmorBonus(it, 4);
	if(roll>84) AddArmorBonus(it, 5);
	}
	return;
}

//used to add bonuses to gear used by boss in encounters
void AddSpecialBonusEncounterBoss(Item@ it)
{
	if(it.GetType() == ITEM_TYPE_WEAPON && !it.IsStackable())
	{
	int roll = Random(0,99);
	if(roll>=0) AddWeaponBonus(it, 1, true); // 100%
	if(roll>29)	AddWeaponBonus(it, 2, true); // 70%
	if(roll>59)	AddWeaponBonus(it, 3, true); // 40%
	if(roll>89)	AddWeaponBonus(it, 4, true); // 10%
	if(roll>94) AddWeaponBonus(it, 5, true); // 5%
	}

	else if(it.GetType() == ITEM_TYPE_ARMOR)
	{
	int roll = Random(0,99);
	if(roll>=0) AddArmorBonus(it, 1);
	if(roll>29)	AddArmorBonus(it, 2);
	if(roll>59)	AddArmorBonus(it, 3);
	if(roll>89)	AddArmorBonus(it, 4);
	if(roll>94) AddArmorBonus(it, 5);
	}
	return;
}

void AddSpecialBonusLow(Item@ it) // 03-03-2014 Cubik: funkcja dla skrzynek spawnujacych bonusowe bronie/armory o nizÑ˜szej jakosci (rzadziej unique, czesciej advanced) - GORSZA WERSJA AddSpecialBonus
{
	if(it.GetType() == ITEM_TYPE_WEAPON && !it.IsStackable())
	{
		int roll = Random(0,99);
		if(roll>=0) AddWeaponBonus(it, 1); // 100%
		if(roll>34)	AddWeaponBonus(it, 2); // 65%
		if(roll>59)	AddWeaponBonus(it, 3); // 40%
		if(roll>74)	AddWeaponBonus(it, 4); // 25%
		if(roll>84) AddWeaponBonus(it, 5); // 15%
	}

	else if(it.GetType() == ITEM_TYPE_ARMOR)
	{
		int roll = Random(0,99);
		if(roll>=0) AddArmorBonus(it, 1);
		if(roll>34)	AddArmorBonus(it, 2);
		if(roll>59)	AddArmorBonus(it, 3);
		if(roll>74)	AddArmorBonus(it, 4);
		if(roll>84) AddArmorBonus(it, 5);
	}
	return;
}

void AddSpecialBonus(Item@ it)
{
	if(it.GetType() == ITEM_TYPE_WEAPON && !it.IsStackable())
	{
		AddWeaponBonus(it, 1);
		AddWeaponBonus(it, 2);
		AddWeaponBonus(it, 3);
		AddWeaponBonus(it, 4);
		if(Random(0,1)==0) 	AddWeaponBonus(it, 5);
	}

	else if(it.GetType() == ITEM_TYPE_ARMOR)
	{
		AddArmorBonus(it, 1);
		AddArmorBonus(it, 2);
		AddArmorBonus(it, 3);
		AddArmorBonus(it, 4);
		if(Random(0,1)==0) AddArmorBonus(it, 5);
	}
	return;
}

void AddBonuses(Item@ it, string@ crafter)
{
	if(it.GetType() == ITEM_TYPE_WEAPON && !it.IsStackable())
	{
		int roll = Random(0,99);
		if(roll>55) AddWeaponBonus(it, 1, true);
		if(roll>76)	AddWeaponBonus(it, 2, true);
		if(roll>88)	AddWeaponBonus(it, 3, true);
		if(roll>95)	AddWeaponBonus(it, 4, true);
		if(roll==99) AddWeaponBonus(it, 5, true);
		SetLexem(it, "$crafter", crafter);
	}

	else if(it.GetType() == ITEM_TYPE_ARMOR)
	{
		int roll = Random(0,99);
		if(roll>55) AddArmorBonus(it, 1);
		if(roll>76)	AddArmorBonus(it, 2);
		if(roll>88)	AddArmorBonus(it, 3);
		if(roll>95)	AddArmorBonus(it, 4);
		if(roll==99) AddArmorBonus(it, 5);
		SetLexem(it, "$crafter", crafter);
	}
	return;
}

bool AddAnotherBonus(Item@ it)
{
	if(!valid(it))
		return false;

	uint bonusCnt = BonusNumber(it);
	if(bonusCnt > 4)
		return false;

	++bonusCnt;

	if(it.GetType() == ITEM_TYPE_WEAPON && !it.IsStackable())
		AddWeaponBonus(it, bonusCnt, true);
	else if(it.GetType() == ITEM_TYPE_ARMOR)
		AddArmorBonus(it, bonusCnt);
	else
		return false;

	return true;
}

void AddArmorBonus(Item@ it, int number)
{
	int minRoll=1;
	int maxRoll=1;

	uint bonusType=0;
	uint maxBonusType=BONUS_ARMOR_HEALING_RATE; // for armors

	bool isHelmet = (it.GetProtoId()>=725 && it.GetProtoId()<=741);
	// If helmet, adjust bonus type range
	if(isHelmet) maxBonusType=BONUS_ARMOR_PLASMA_DR;

	// Choose which bonus and specify bonus value range
	do
	{
		bonusType=Random(100,maxBonusType);
	}
	while (HasBonusAlready(it,bonusType));

	switch(bonusType)
	{
		// Armors and helmets
		case BONUS_ARMOR_CRIT_CHANCE: {minRoll=1;maxRoll=5;break;}
		case BONUS_ARMOR_CRIT_POWER: {minRoll=1;maxRoll=5;break;}
		case BONUS_ARMOR_NORMAL_DT: {maxRoll=5;break;}
		case BONUS_ARMOR_LASER_DT: {maxRoll=5;break;}
		case BONUS_ARMOR_FIRE_DT: {maxRoll=5;break;}
		case BONUS_ARMOR_PLASMA_DT: {maxRoll=5;break;}
		case BONUS_ARMOR_NORMAL_DR: {maxRoll=10;break;}
		case BONUS_ARMOR_LASER_DR: {maxRoll=10;break;}
		case BONUS_ARMOR_FIRE_DR: {maxRoll=10;break;}
		case BONUS_ARMOR_PLASMA_DR: {maxRoll=10;break;}
		// Only armors
		case BONUS_ARMOR_EXPLODE_DT: {maxRoll=5;break;}
		case BONUS_ARMOR_EXPLODE_DR: {maxRoll=10;break;}
		case BONUS_ARMOR_MAX_AP: break;
		case BONUS_ARMOR_RAD_RES: {minRoll=10;maxRoll=30;break;}
		case BONUS_ARMOR_POISON_RES: {minRoll=10;maxRoll=30;break;}
		case BONUS_ARMOR_STRENGTH: break;
		case BONUS_ARMOR_PERCEPTION: break;
		case BONUS_ARMOR_ENDURANCE: break;
		case BONUS_ARMOR_CHARISMA: break;
		case BONUS_ARMOR_INTELLIGENCE: break;
		case BONUS_ARMOR_AGILITY: break;
		case BONUS_ARMOR_LUCK: break;
		case BONUS_ARMOR_CARRY_WEIGHT: {minRoll=5;maxRoll=20;break;}
		case BONUS_ARMOR_HEALING_RATE: {minRoll=1;maxRoll=5;break;}
		default: break;
	}

	// Choose bonus roll
	int roll = Random(minRoll, maxRoll);

	// Choose which value
	switch(number)
	{
		case 1: {it.Val0=bonusType; it.Val5=roll;break;}
		case 2: {it.Val1=bonusType; it.Val6=roll;break;}
		case 3: {it.Val2=bonusType; it.Val7=roll;break;}
		case 4: {it.Val3=bonusType; it.Val8=roll;break;}
		case 5: {it.Val4=bonusType; it.Val9=roll;break;}
		default: break;
	}
	//Log("Armor bonus: " + bonusType + " Value: " + roll);
	it.Update();
return;
}


void AddWeaponBonus(Item@ it, int number, bool isCrafting = false)
{

	uint minRoll=1;
	uint maxRoll=1;

	uint bonusType=0;

	int skillNum = it.Proto.Weapon_Skill_0;
    bool isRangeWeapon = (skillNum == SK_SMALL_GUNS || skillNum == SK_BIG_GUNS || skillNum == SK_ENERGY_WEAPONS);
	// Choose which bonus and specify bonus value range
	do
	{
		if(isRangeWeapon)
			bonusType=Random(100, BONUS_WEAPON_MAX_RANGE);
		else
			bonusType=Random(100, BONUS_WEAPON_MAX_AP);
	}
	while (HasBonusAlready(it,bonusType) || IsBonusExcluded(isCrafting, bonusType));

	switch(bonusType)
	{
		case BONUS_WEAPON_CRITICAL_ROLL: {maxRoll=5;break;}
		case BONUS_WEAPON_CRITICAL_CHANCE: {maxRoll=5;break;}
		case BONUS_WEAPON_MIN_DMG: {minRoll=10;maxRoll=25;break;}
		case BONUS_WEAPON_MAX_DMG: {minRoll=10;maxRoll=25;break;}
		case BONUS_WEAPON_ACCURACY: {minRoll=5;maxRoll=25;break;}
		case BONUS_WEAPON_MAX_RANGE: {minRoll=1;maxRoll=2;break;}
		case BONUS_WEAPON_MAX_AP: break;
		default: break;
	}

	// Choose bonus roll
	uint roll = Random(minRoll, maxRoll);

	// Choose which value
	switch(number)
	{
		case 1: {it.Val0=bonusType; it.Val5=roll;break;}
		case 2: {it.Val1=bonusType; it.Val6=roll;break;}
		case 3: {it.Val2=bonusType; it.Val7=roll;break;}
		case 4: {it.Val3=bonusType; it.Val8=roll;break;}
		case 5: {it.Val4=bonusType; it.Val9=roll;break;}
		default: break;
	}
	//Log("Weapon bonus: " + bonusType + " Value: " + roll);
	it.Update();
return;
}

// Checks if given bonus is allowed - used to exclude some bonuses from crafting
bool IsBonusExcluded(bool isCrafting, int bonusType)
{
	if(!isCrafting)
		return false;

	if(bonusType == BONUS_WEAPON_MAX_AP)
		return true;

	return false;
}

// Checks if there is no such bonus already on an item
bool HasBonusAlready(Item@ it, int bonusType)
{
	if(it.Val0==bonusType) return true;
	if(it.Val1==bonusType) return true;
	if(it.Val2==bonusType) return true;
	if(it.Val3==bonusType) return true;
	if(it.Val4==bonusType) return true;
	return false;
}

// Checks value of specified bonus type

int checkBonus(Item@ it, int bonusType)
{
	if(it.Val0==bonusType) return it.Val5;
	if(it.Val1==bonusType) return it.Val6;
	if(it.Val2==bonusType) return it.Val7;
	if(it.Val3==bonusType) return it.Val8;
	if(it.Val4==bonusType) return it.Val9;
	return 0;
}

#endif //__CLIENT
