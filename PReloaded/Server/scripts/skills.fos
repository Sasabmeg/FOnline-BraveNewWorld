//
// FOnline: 2238
// Rotators
//
// skills.fos
//

// This script contains global handlers for use of some skills.

#include "_macros.fos"
#include "MsgStr.h"
#include "utils_h.fos"
#include "reputations_h.fos"

Item@ SelectSkillItem(Critter& cr, Item@ item, uint16 skill)
{
    Item@ handItem = _CritGetItemHand(cr);
    if(valid(handItem) && handItem.Proto.Misc_ToolSkillNum == skill)
        return handItem;
    return item;
}

bool UseFirstAidOnCritter(Critter& cr, Critter& targetCr, Item@ item)
{
/*
    if(valid(cr.GetMap()) && cr.GetMap().IsTurnBased())
    {
        cr.Say(SAY_NETMSG, "This skill cannot be used during turn-based combat.");
        return true;
    }
*/

    bool is_self = (targetCr.Id == cr.Id);
    bool is_field_medic = cr.Perk[PE_FIELD_MEDIC] != 0 && !is_self && targetCr.IsPlayer();

    if(targetCr.IsDead())
    {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NORESSURECT);
        return true;
    }

    if(!_CritNeedFirstAid(targetCr))
    {
        if(_CritNeedDoctor(targetCr))
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NOFIRSTAID_NEEDDOCTOR);
        else if(is_self)
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NONEED_FIRSTAID);
        return true;
    }

    if((cr.Timeout[TO_SK_FIRST_AID] > 0 && !is_field_medic) || (is_field_medic && targetCr.Timeout[TO_SK_FIRST_AID] > 0))
    {
        if(cr.IsPlayer())
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS);
        return !is_field_medic;
    }

    if(!is_self && cr.Param[MODE_HIDE] != 0 && cr.GetAccess() < ACCESS_TESTER)
        cr.ParamBase[MODE_HIDE] = 0;

    // without living anatomy:
    //   5% chance for critical success/failure
    //   it's success if Random(0,11) vs luck succeed, failure otherwise
    // with field medic:
    //   10% chance for critical success/failure
    //   it's success if Random(0,21) vs luck+10 succeed, failure otherwise
    bool isFieldMedic = cr.Perk[PE_FIELD_MEDIC] > 0;
    bool isCritFailure = Random(1, 100) <= int(isFieldMedic ? 10 : 5);
    bool isCritSuccess = false;
    if(isCritFailure)
    {
        if(Random(0, isFieldMedic ? 21 : 11) <= cr.Stat[ST_LUCK] + (isFieldMedic ? 10 : 0))
        {
            isCritFailure = false;
            isCritSuccess = true;
            cr.Say(SAY_NETMSG, "That was a very skillful intervention.");
        }
        else if(cr.Perk[PE_MEDIC] > 0)
            isCritFailure = false;
        else
            cr.Say(SAY_NETMSG, "It went horrible.");
    }

    int sk = cr.Skill[SK_FIRST_AID];

    @item = SelectSkillItem(cr, item, SK_FIRST_AID);
    if(valid(item))
    {
        sk += item.Proto.Misc_ToolSkillBonus;
        if(Random(0, 30) == 0)
            cr.DeleteItem(item.GetProtoId(), 1);
    }

    int healerBonus = (cr.Perk[PE_MEDIC] > 0 ? Random(15, 30) : 0) + (cr.Perk[PE_FIELD_MEDIC] > 0 ? Random(20, 40) : 0);
    int heal = isCritSuccess ? (sk + healerBonus) : (isCritFailure ? Random(1, sk / 10) : (Random((sk * 2) / 5, sk) + healerBonus));
    if(heal < 1)
        heal = 1;

    int curHp = targetCr.Stat[ST_CURRENT_HP];
    int maxHp = targetCr.Stat[ST_MAX_LIFE];
    if(curHp + heal > maxHp)
        heal = maxHp - curHp;
    targetCr.StatBase[ST_CURRENT_HP] += heal;

        //  Floating healing text.
    if (isCritFailure)
        FloatingHealText(targetCr, heal, HEAL_TEXT_REASON_FIRSTAID, SKILL_CHECK_FAILURE);
    else if (isCritSuccess)
        FloatingHealText(targetCr, heal, HEAL_TEXT_REASON_FIRSTAID, SKILL_CHECK_CRITICAL_SUCCESS);
    else
        FloatingHealText(targetCr, heal, HEAL_TEXT_REASON_FIRSTAID, SKILL_CHECK_SUCCESS);

    cr.Say(SAY_NETMSG, "Hit Points +" + heal);
    if(!is_self)
        targetCr.Say(SAY_NETMSG, "Hit Points +" + heal);

    if(is_field_medic)
        _SetTimeout(targetCr, TO_SK_FIRST_AID, FIRST_AID_TIMEOUT(cr));
    else
        _SetTimeout(cr, TO_SK_FIRST_AID, FIRST_AID_TIMEOUT(cr));

    if(cr.Stat[ST_LEVEL]<30) cr.StatBase[ST_EXPERIENCE] += heal * 3;
    if(_IsTrueNpc(targetCr) && cr.Id != targetCr.Id && IsHumanoid(targetCr) && !IsCurrentEnemy(targetCr, cr.Id))
    {
        if(_ValidReputationIndex(targetCr.Stat[ST_TEAM_ID]))
            AddReputation(cr, targetCr.Stat[ST_TEAM_ID], heal / 20, REP_FIRST_AID_CAP);
        if(cr.IsSeenBy(targetCr))
            targetCr.Say(SAY_NORM_ON_HEAD, "Thank you.");
    }

    if(cr.IsPlayer())
    {
        AddScore(cr, SCORE_DOCTOR, 1);
    }

    return true;
}

bool UseDoctorOnCritter(Critter& cr, Critter& targetCr, Item@ item)
{
/*
    if(valid(cr.GetMap()) && cr.GetMap().IsTurnBased())
    {
        cr.Say(SAY_NETMSG, "This skill cannot be used during turn-based combat.");
        return true;
    }
*/

    bool is_self = (targetCr.Id == cr.Id);
    bool is_ko = targetCr.IsKnockout() && targetCr.Stat[ST_CURRENT_HP] > 0;
    bool is_injured = _CritNeedDoctor(targetCr);
    bool is_field_medic = cr.Perk[PE_FIELD_MEDIC] != 0 && !is_self && targetCr.IsPlayer();

    if(targetCr.IsDead())
    {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NORESSURECT);
        return true;
    }

    if(!is_injured && !is_ko)
    {
        if(_CritNeedFirstAid(targetCr))
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NODOCTOR_NEEDFIRSTAID);
        else if(is_self)
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NONEED_DOCTOR);
        return true;
    }

    if((cr.Timeout[TO_SK_DOCTOR] > 0 && !is_field_medic) || (is_field_medic && targetCr.Timeout[TO_SK_DOCTOR] > 0))
    {
        if(is_ko && cr.Perk[PE_MEDIC] != 0 )      //can heal KO even with cooldown with Medic perk
        {
            targetCr.StatBase[ST_CURRENT_AP] = 0;

            if(!is_self && cr.Param[MODE_HIDE] != 0 && cr.GetAccess() < ACCESS_TESTER)
                cr.ParamBase[MODE_HIDE] = 0;
        }

        if(cr.IsPlayer() && is_injured)
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS);
        return true;
    }

    if(!is_self && cr.Param[MODE_HIDE] != 0 && cr.GetAccess() < ACCESS_TESTER)
        cr.ParamBase[MODE_HIDE] = 0;

    int sk = cr.Skill[SK_DOCTOR];

    @item = SelectSkillItem(cr, item, SK_DOCTOR);
    if(valid(item))
    {
        sk += item.Proto.Misc_ToolSkillBonus;
        if(Random(0, 30) == 0)
            cr.DeleteItem(item.GetProtoId(), 1);
    }

    int uninjured = 0;
    int injured = 0;

    for(int i = DAMAGE_EYE; i <= DAMAGE_LEFT_LEG; ++i)
    {
        if(!_CritHasInjureBody(targetCr, i))
            continue;
        injured++;
        if(sk > Random(5, 95))
        {
            _CritUninjureBody(targetCr, i);
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_HEAL_DMG(i - DAMAGE_POISONED));
            uninjured++;
        }
        else
        {
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NOHEAL_DMG(i - DAMAGE_POISONED));
        }
        sk -= 35;
    }

    if(is_ko) //heals KO
    {
        targetCr.StatBase[ST_CURRENT_AP] = 0;
    }

    if(is_injured || (is_ko && cr.Perk[PE_MEDIC] == 0))
    {
        if(is_field_medic)
            _SetTimeout(targetCr, TO_SK_DOCTOR, DOCTOR_TIMEOUT(cr));
        else
            _SetTimeout(cr, TO_SK_DOCTOR, DOCTOR_TIMEOUT(cr));
    }

    if(uninjured > 0)
    {
        if(is_self)
            VerboseAction(cr, "applies wound dressing" + (uninjured > 1 ? "s" : ""));
        else
            VerboseAction(cr, targetCr, "treats injur" + (uninjured > 1 ? "ies" : "y") + " of TARGET");
        cr.StatBase[ST_EXPERIENCE] += uninjured * 50;
        if(_IsTrueNpc(targetCr) && !is_self && IsHumanoid(targetCr) && !IsCurrentEnemy(targetCr, cr.Id))
        {
            if(_ValidReputationIndex(targetCr.Stat[ST_TEAM_ID]))
                AddReputation(cr, targetCr.Stat[ST_TEAM_ID], uninjured * 8, REP_DOCTOR_CAP);
            if(cr.IsSeenBy(targetCr))
                targetCr.Say(SAY_NORM_ON_HEAD, "Thank you.");
        }
    }
    else
    {
        /*if( is_self )
                VerboseAction( cr, "TODO uninjured=0 is_self" );
           else
                VerboseAction( cr, targetCr, "TODO uninjured=0 TARGET" );*/
    }

    if(cr.IsPlayer() && is_injured)
    {
        AddScore(cr, SCORE_DOCTOR, uninjured);
    }
    return true;
}
