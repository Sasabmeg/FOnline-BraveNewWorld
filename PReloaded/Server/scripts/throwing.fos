//
// FOnline: 2238
// Rotators
//
// throwing.fos
//

// shared client/server script for throwing objects
#include "_macros.fos"
#include "MsgStr.h"

#ifdef __SERVER
# define CritterMutual       Critter
# define ItemMutual          Item

#endif
#ifdef __CLIENT
# include "sprite.fos"
# include "_colors.fos"
# include "_client_defines.fos"
# define CritterMutual       CritterCl
# define ItemMutual          ItemCl
#endif

#define STR_THROWING_HIT     (10400)
#define STR_THROWING_MISS    (10401)

bool IsThrowingWeapon(ItemMutual@ item)
{
    if(!valid(item))
        return false;
    if(item.GetType() != ITEM_TYPE_WEAPON)
        return false;
    uint8 use = _WeaponModeUse(item.Mode);
    return _WeaponSkill(item.Proto, use) == SK_THROWING;
}

uint GetMaxRange(CritterMutual& cr, ItemMutual@ item)
{
    if(!valid(item))
        return 0;
    uint bonus = 6 * cr.Perk[PE_HEAVE_HO];
    uint max = 3 * cr.Stat[ST_STRENGTH];
    if(IsThrowingWeapon(item))
    {
        uint8 use = _WeaponModeUse(item.Mode);
        return bonus + MIN(_WeaponMaxDist(item.Proto, use), max);
    }
    else
    {
        float lbs = GRAMM_TO_LBS(item.Proto.Weight);
        lbs = MAX(lbs, 1.0f);
        lbs = sqrt(lbs);
        return (bonus + uint(float(max) / lbs));
    }
}

bool IsThrowable(ProtoItem& weapon)
{
    if(!valid(weapon))
        false;
    return !(weapon.Type == ITEM_TYPE_WEAPON && weapon.Weapon_IsUnarmed);
}

int ThrowingToHit(CritterMutual& cr, uint16 tx, uint16 ty, ProtoItem& weapon)
{
    if(!valid(weapon))
        return 0;
    if(weapon.Type == ITEM_TYPE_WEAPON && weapon.Weapon_IsUnarmed)
        return 0;
    if(!cr.IsLife())
        return 0;

    int dist = GetDistantion(cr.HexX, cr.HexY, tx, ty);

    int toHit = int(cr.Skill[SK_THROWING]);
    int weaponPerk = weapon.Weapon_Perk;
    int blockers = 0;

    // cr.Say(SAY_NETMSG, "Applying range modifiers.");
    // ranged attack modifiers
    int distmod1 = 2;   // used for initial weapon bonus
    int distmod2 = 0;   // minimal distance

    int perception = cr.Stat[ST_PERCEPTION];
    int acc = dist;

    if(dist < distmod2)
        acc += distmod2;
    else
    {
        if(cr.IsPlayer())
            acc -= (perception - 2) * distmod1;                  // we want to keep it, because fo2238 might use it to display NPCs chance (via possessing)
        else
            acc -= perception * distmod1;
    }

    if(-2 * perception > acc)
        acc = -2 * perception;

    acc -= 2 * cr.Perk[PE_SHARPSHOOTER];

    if(acc >= 0)
    {
        if(cr.Damage[DAMAGE_EYE] != 0)
            acc *= -12;
        else
            acc *= -4;
    }
    else
        acc *= -4;

    toHit += acc;

    #ifdef __SERVER
    Map@ map = cr.GetMap();
    blockers = map.GetCrittersPath(cr.HexX, cr.HexY, tx, ty, 0.0f, dist, FIND_LIFE, null);
    #endif
    #ifdef __CLIENT
    blockers = GetCrittersPath(cr.HexX, cr.HexY, tx, ty, 0.0f, dist, FIND_LIFE, null);
    #endif

    toHit -= 10 * blockers;

    if(cr.Damage[DAMAGE_EYE] != 0)
        toHit -= 25;
    toHit = CLAMP(toHit, 5, _MaxToHit(cr));

    return toHit;
}

int ActionPointsCost(ItemMutual& item, uint8 brofBonus)
{
    if(IsThrowingWeapon(item))
    {
        uint8 use = _WeaponModeUse(item.Mode);
        return _WeaponApCost(item.Proto, use) - brofBonus;
    }
    float lbs = GRAMM_TO_LBS(item.Proto.Weight);
    lbs = MAX(lbs, 1.0f);
    lbs = sqrt(lbs) + 3;
    return int(lbs);
}

bool IsThrowableThere(CritterMutual& cr, ItemMutual@ item, uint16 tx, uint16 ty)
{
    if(!valid(item) || !IsThrowable(item.Proto) || !cr.IsLife())
        return false;
    #ifdef __SERVER
    uint8 brofBonus = (cr.Perk[PE_BONUS_RATE_OF_ATTACK]>0)?1:0;
    if(cr.Stat[ST_CURRENT_AP] < ActionPointsCost(item, brofBonus))
        return false;
    #endif
    return GetMaxRange(cr, item) >= GetDistantion(cr.HexX, cr.HexY, tx, ty);
    // todo: wall tracing on the client side
}

#ifdef __SERVER

import void CommenceExplosionEx(Critter@ attacker, Map@ map, uint16 tx, uint16 ty, Critter@ target, uint weapPid, bool isCritical, uint intentionallyId, bool isRocket, bool isExplodeRocket) from "combat";

void unsafe_Throw(Critter& player, int px, int py, int p2, string@ param3, array<int>@ param4)
{
    if(player.IsBusy())
        return;
    Map@ map = player.GetMap();
    if(!valid(map))
        return;
    if(px < 0 || px >= int(map.GetWidth()) || py < 0 || py >= int(map.GetHeight()))
        return;

    Item@ item = player.GetItem(0, SLOT_HAND1);
    if(!IsThrowableThere(player, item, px, py))
        return;

    uint16 tx = px;
    uint16 ty = py;

    // wallcheck
    uint16 pbx = tx;
    uint16 pby = ty;
    uint16 bx = tx;
    uint16 by = ty;
    if(IsGrenade(item))
    {
        map.GetCrittersPath(player.HexX, player.HexY, tx, ty, 0.0f, 0, FIND_LIFE_AND_KO, null, pbx, pby, bx, by);
        tx = pbx;
        ty = pby;
    }
    else
    {
        map.GetHexCoordWall(player.HexX, player.HexY, tx, ty, 0, 0);
    }

    int tohit = ThrowingToHit(player, tx, ty, item.Proto);
    if(tohit >= Random(1, 100))
    {
        CommenceThrowing(player, map, item, tx, ty);
        player.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_THROWING_HIT, "$what@msg obj " + (item.GetProtoId() * 100) + "@");
    }
    else
    {
        uint dist = GetDistantion(player.HexX, player.HexY, tx, ty) + 1;
        map.MoveHexByDir(tx, ty, Random(0, 5), Random(1, dist / 2));
        // map.GetHexCoordWall(player.HexX,player.HexY,tx,ty,0,0);
        map.GetCrittersPath(player.HexX, player.HexY, tx, ty, 0.0f, 0, FIND_LIFE_AND_KO, null, pbx, pby, bx, by);
        tx = pbx;
        ty = pby;
        CommenceThrowing(player, map, item, tx, ty);
        player.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, STR_THROWING_MISS, "$what@msg obj " + (item.GetProtoId() * 100) + "@");
    }

}

bool IsGrenade(Item& item)
{
    if(!IsThrowingWeapon(item))
        return false;
    uint8 use = _WeaponModeUse(item.Mode);
    uint8 dmgType = _WeaponDmgType(item.Proto, use);
    return dmgType == DAMAGE_TYPE_PLASMA || dmgType == DAMAGE_TYPE_EMP || dmgType == DAMAGE_TYPE_EXPLODE;
}

void CommenceThrowing(Critter& cr, Map& map, Item& item, uint16 tx, uint16 ty)
{
    uint8 dir = GetDirection(cr.HexX, cr.HexY, tx, ty);
    cr.SetDir(dir);
    _CritAnimateThrow(cr);
    if(cr.Mode[MODE_HIDE] != 0)
    {
        if(!cr.IsPlayer() || cr.GetAccess() == ACCESS_CLIENT)
            cr.ModeBase[MODE_HIDE] = 0;
    }
    cr.Wait(__Breaktime);
    uint8 brofBonus = (cr.Perk[PE_BONUS_RATE_OF_ATTACK]>0)?1:0;
    cr.StatBase[ST_CURRENT_AP] -= 100 * ActionPointsCost(item, brofBonus);
    map.RunFlyEffect(item.GetProtoId(), cr, null, cr.HexX, cr.HexY, tx, ty);
    uint16 pid = item.GetProtoId();
    if(IsGrenade(item))
    {
        cr.PlaySound('W', SOUND_WEAPON_USE, _WeaponSoundId(item.Proto, 0), '1', true);         // '1'?
        if(cr.Timeout[TO_BATTLE] < int(__TimeoutBattle))
            _SetTimeout(cr, TO_BATTLE, __TimeoutBattle);
        if(!map.IsTurnBased() && map.IsTurnBasedAvailability())
            map.BeginTurnBased(cr);
        uint[] values = { map.Id, tx, ty, pid, cr.Id };
        CreateTimeEvent(AFTER(REAL_SECOND(1)), "e_Explode", values, false);
        _SubItem(item, 1);
    }
    else
    {
        cr.PlaySound('W', SOUND_WEAPON_USE, 'O', '1', true);         // '1'?
        MoveItem(item, 1, map, tx, ty);
        item.EventDrop(cr);
        cr.EventDropItem(item);
    }
}

uint e_Explode(array<uint>@ values)     // map id, tx, ty, pid, attacker id
{
    Map@ map = GetMap(values[0]);
    if(!valid(map))
        return 0;
    Critter@ cr = GetCritter(values[4]);
    CommenceExplosionEx(GetCritter(values[4]), map, values[1], values[2], null, values[3], false, 0, false, false);
    return 0;
}
#endif

#ifdef __CLIENT

bool Active = false;
int  LastCursor = 0;

bool ThrowingMouseDown(int click)
{
    if(!IsThrowingActive())
        return false;
    TryThrow();
    return true;
}

bool IsThrowingActive() // export?
{
    return Active;
}

void ThrowingKeyDown(uint8 key)   // export
{
    if(key == DIK_GRAVE && !__ConsoleActive)
        SetThrowing(true);
}

void ThrowingKeyUp(uint8 key)   // export
{
    if(key == DIK_GRAVE)
        SetThrowing(false);
}

void ThrowingInputLost() // export
{
    SetThrowing(false);
}

void SetThrowing(bool enabled)
{
    if(enabled)
    {
        Active = true;
        LastCursor = ::GetCurrentCursor();
        ChangeCursor(1);         // todo
    }
    else
    {
        Active = false;
        ChangeCursor(LastCursor);
    }
}

void RenderThrowing() // export
{
    if(!IsThrowingActive())
        return;
    CritterCl@ chosen = GetChosen();
    if(!valid(chosen))
        return;

    uint16 hx = 0, hy = 0;
    if(!GetMonitorHex(__MouseX, __MouseY, hx, hy))
        return;
    // todo: check for sanity?
    ItemCl@ item = chosen.GetItem(0, SLOT_HAND1);
    if(!IsThrowableThere(chosen, item, hx, hy))
        return;

    // now we actually render the info
    int x = 0, y = 0;
    if(!GetHexPos(hx, hy, x, y))
        return;                           // should not happen

    uint tohit = ::ThrowingToHit(chosen, hx, hy, item.Proto);
    uint8 brofBonus = (chosen.Perk[PE_BONUS_RATE_OF_ATTACK]>0)?1:0;
    int  ap = ::ActionPointsCost(item, brofBonus);
    bool hasAp = ap <= chosen.Stat[ST_CURRENT_AP];

    // todo: adjust offsets
    int sprite = LoadSprite(item.Proto.PicInv, 0);
    ::DrawSprite(sprite, -1, x - 50, y - 15, 30, 30, false, false, COLOR_WHITE);
    DrawText(tohit + "%", x + 20, y - 10, 40, 20, COLOR_LGRAY, FONT_TYPE_DEFAULT, FONT_FLAG_BORDERED);
    DrawText(ap + " AP", x + 20, y, 40, 20, hasAp ? COLOR_LGRAY : COLOR_RED, FONT_TYPE_DEFAULT, FONT_FLAG_BORDERED);
}

void TryThrow()
{
    // sanity check
    if(!IsThrowingActive())
        return;
    CritterCl@ chosen = GetChosen();
    if(!valid(chosen))
        return;

    uint16 hx = 0, hy = 0;
    if(!GetMonitorHex(__MouseX, __MouseY, hx, hy))
        return;
    // todo: check for sanity?
    ItemCl@ item = chosen.GetItem(0, SLOT_HAND1);
    if(!IsThrowableThere(chosen, item, hx, hy))
        return;

    // throw
    RunServerScriptUnsafe("throwing@unsafe_Throw", hx, hy, 0, null, null);
}
#endif
