//
// FOnline: 2238
// Rotators
//
// utils_h.fos
//

#ifndef __UTILS__
#define __UTILS__

// various utility functions

#include "_macros.fos"

#define MAP_TYPE_UNKNOWN                 (0)
#define MAP_TYPE_SPECIAL_ENCOUNTER       (1)
#define MAP_TYPE_DESERT_ENCOUNTER        (2)
#define MAP_TYPE_MOUNTAIN_ENCOUNTER      (3)
#define MAP_TYPE_CAVE_ENCOUNTER          (4)
#define MAP_TYPE_CITY_ENCOUNTER          (5)
#define MAP_TYPE_SEWER_ENCOUNTER         (6)
#define MAP_TYPE_COAST_ENCOUNTER         (7)
#define MAP_TYPE_SKYSCRAPER_ENCOUNTER    (8)
#define MAP_TYPE_CITYCOAST_ENCOUNTER     (9)

#define SKILL_CHECK_DOES_NOTHING         (-1)
#define SKILL_CHECK_CRITICAL_FAILURE     (0)
#define SKILL_CHECK_FAILURE              (1)
#define SKILL_CHECK_SUCCESS              (2)
#define SKILL_CHECK_CRITICAL_SUCCESS     (3)
#define IS_CHECK_FAILURE                 # (_ch)                 ((_ch) == SKILL_CHECK_FAILURE || (_ch) == SKILL_CHECK_CRITICAL_FAILURE)
#define IS_CHECK_SUCCESS                 # (_ch)                 ((_ch) == SKILL_CHECK_SUCCESS || (_ch) == SKILL_CHECK_CRITICAL_SUCCESS)

#define _GroupIndex                      # (cr)   (cr.Stat[ST_TEAM_ID])
#define _GroupRank                       # (cr)    (cr.Stat[ST_FACTION_RANK])
#define _GroupMode                       # (cr)    (cr.Stat[ST_FACTION_MODE])
#define _TeamIdPack                      # (__faction, __rank, __mode)(__faction * 100 + 10 * __rank + __mode) // TODO: deprecate (used only in worldmap)
#define _GroupHasNoAffiliation           # (__group) (__group >= TEAM_Mob0)

// reputation group indices
#define _ValidReputationIndex            # (index)  (index >= 2 && index <= 99)

//  Floating Heal Text related
    //  Heal floating text reason definitions
#define HEAL_TEXT_REASON_NOREASON           (0)
#define HEAL_TEXT_REASON_FIRSTAID           (1)
#define HEAL_TEXT_REASON_WEAKHEALINGPOWDER  (2)
#define HEAL_TEXT_REASON_HEALINGPOWDER      (3)
#define HEAL_TEXT_REASON_STIMPAK            (4)
#define HEAL_TEXT_REASON_SUPERSTIMPAK       (5)
#define HEAL_TEXT_REASON_HYPO               (6)

// output info about critter, for log or SayMsg

#define _FileWriteString                 # (__file, __text) do { file f; f.open(__file, "a"); f.writeString(__text); f.close(); } while(false);

#ifndef __UTILS_MODULE__

import void       FloatingHealText(Critter& cr, int healAmount, int reason, int successType = SKILL_CHECK_SUCCESS) from "utils";
import void       FloatingHealTextByDrugPid(Critter& cr, int healAmount, uint16 drugPid) from "utils";
import Location@  GetLocationOf(Critter& critter) from "utils";
import string     GetLocationName(uint locId) from "utils";
import string     GetLocationName(Location@ loc) from "utils";
import bool       ReadPids(array<int>& out pids, bool removeinvalid) from "utils";
import void       ReadDefines(string@ fileName, dictionary& items, array<string>@ defines) from "utils";
import void       ReadMsgStrings(string& fileName, dictionary& output ) from "utils";
import bool       ParseDefine(const string& in line, string& out spid, int& out id) from "utils";
import int        SkipWhitespaces(const string& in str, int start) from "utils";
import int        SkipNonWhitespaces(const string& in str, int start) from "utils";
import bool       IsParameterTag(string& str) from "utils";
import string     GetParameterString(array<string@>@ arr, string& parameter) from "utils";
import int        GetIndexOfString(array<string@>@ arr, string& str) from "utils";
import string     GetConcatenatedString(array<string@>@ arr, uint startindex, int stopindex) from "utils";
import string     GetMsgStr(int textMsg, uint strNum) from "utils";
import string     GetConditionOfCritter(Critter@ cr) from "utils";
import string     GetExtConditionOfCritter(Critter@ cr) from "utils";
import uint       GetAllOnlinePlayers(array<Critter@>& out players) from "utils";
import uint       GetAuthenticatedPlayers(array<Critter@>& out players) from "utils";
import uint       GetAuthenticatedPlayers(array<Critter@>& out players, bool ignorePriviledges) from "utils";
import uint       GetNumberOfPlayersOnline() from "utils";
import void       SetTurnBasedAvailability(Location@ loc) from "utils";
import bool       IsEncounterMap(Map@ map) from "utils";
import bool       IsSpecialEncounterMap(Map@ map) from "utils";
import bool       IsTown(Map@ map) from "utils";
import uint       GetMapType(Map@ map) from "utils";
import void       LockDoor(uint x, uint y, Map@ map, uint complexity, uint lockid) from "utils";
import void       UnlockDoor(uint x, uint y, Map@ map) from "utils";
import void       ClearContainer(Item@ container) from "utils";
import void       MoveItemsCritterToCont(Critter& crFrom, Item& contTo, uint specid) from "utils";
import string     GetCritterInfo(Critter& cr) from "utils";
import bool       AddExpTeam(Critter& critter, int xp) from "utils";
import void       ClearEnemyStack(Critter& critter) from "utils";
import void       ClearEnemyStacksOnMap(Map@ map) from "utils";
import bool       IsCurrentEnemy(Critter& cr, uint targetId) from "utils";
import string@    GetSafePlayerName(uint id) from "utils";
import string     GetSafePlayerName(uint id, string& onSuccess, string& onError) from "utils";
import IDateTime@ GetCurrentDateTime() from "utils";
import string     GetCurrentDateTimeString() from "utils";
import string     GetCurrentDateTimeString(bool date, bool time) from "utils";
import Critter@   GetMostSkilled(array<Critter@>@ group, int skill) from "utils";
import string     GetAuthString(Critter& player) from "utils";
import string     GetAuthString(int accesslevel) from "utils";
import bool       CanRequestHelp(Critter& player) from "utils";
import void       SetRequestedHelp(Critter& player) from "utils";
import void       SetRequestedHelp(Critter& player, int minutes) from "utils";
import Critter@   GetOnlineGM() from "utils";
import void       Preprocess(Critter& player, string& commandString) from "utils";
import bool       IsHumanoid(Critter@ cr) from "utils";
import uint       GetGroupIndex(Critter& cr) from "utils";
import uint       GetGroupIndex(int st) from "utils";
import void       SetGroupIndex(Critter& cr, uint val) from "utils";
import uint       GetGroupRank(Critter& cr) from "utils";
import void       SetGroupRank(Critter& cr, uint val) from "utils";
import uint       GetGroupMode(Critter& cr) from "utils";
import void       SetGroupMode(Critter& cr, uint val) from "utils";
import void       SetGroupInfo(Critter& cr, uint faction, uint rank, uint mode) from "utils";
import void       SetGroupInfoPack(Critter& cr, uint packInfo) from "utils";
import void       ClearEvents(Critter& cr) from "utils";
import void       MapRefreshVisible(Map@ map, uint hexX, uint hexY, uint radius) from "utils";

import int  GetGvar(uint gvar) from "utils";
import void SetGvar(uint gvar, uint value) from "utils";
import int  GetLLvar(Location& location, uint llvar) from "utils";
import int  GetLLvar(uint locationId, uint llvar) from "utils";
import void SetLLvar(Location& location, uint llvar, uint value) from "utils";
import int  GetLMvar(Map& map, uint llvar) from "utils";
import int  GetLMvar(uint mapId, uint llvar) from "utils";
import void SetLMvar(Map& map, uint llvar, uint value) from "utils";
import int  GetLIvar(Item& item, uint llvar) from "utils";
import int  GetLIvar(uint itemId, uint llvar) from "utils";
import void SetLIvar(Item& item, uint llvar, uint value) from "utils";
import int  GetLvar(Critter& critter, uint lvar) from "utils";
import int  GetLvar(uint id, uint lvar) from "utils";
import void SetLvar(Critter& critter, uint lvar, uint value) from "utils";
import void SetLvar(uint id, uint lvar, uint value) from "utils";
import int  GetUvar(uint uvar, uint key, uint index) from "utils";
import void SetUvar(uint uvar, uint key, uint index, uint value) from "utils";
import void SetLLvar(uint locationId, uint llvar, uint value) from "utils";

import uint GetContainerValue(Item@ container) from "utils";
import uint BaseItemValue(uint pid, bool ammo) from "utils";
import uint BaseItemValue(uint pid, uint broken, uint det, bool ammo) from "utils";
import uint BaseItemValue(Item@ item) from "utils";
import uint BaseItemValue(Item@ item, uint proc) from "utils";
import uint BaseSingleItemValue(Item@ item) from "utils";
import uint BaseSingleItemValue(Item@ item, uint proc) from "utils";

import void   SetBloodType(Critter@ cr) from "utils";
import string GetBloodType(Critter@ cr) from "utils";
import string GetBloodRandom() from "utils";

import void LogCommandUsage(Critter& player, string& commandString) from "utils";
import void DropTimeouts(Critter& cr) from "utils";

import bool     HasItem(Critter@ cr, uint pid) from "utils";
import bool     HasSomeWeapon(Critter@ cr) from "utils";
import uint     GetBestWeaponSkill(Critter@ cr) from "utils";
import void     GiveBag(uint bag, Critter@ cr) from "utils";
import void     SetQuestGarbager(uint time, uint playerid, uint locid, uint var, uint val) from "utils";
import void     SetQuestVariableGarbager(uint time, uint playerid, uint var, uint val) from "utils";

import Critter@ AddNpc(Map@ map, uint16 pid, uint16 x, uint16 y, uint8 dir, uint dialogId, string& script, uint aiPack, uint bagId, uint teamId, bool isMob, uint level) from "utils";
import Critter@ AddNpc(Map@ map, uint16 pid, uint16 x, uint16 y, uint8 dir, uint dialogId, string& script, uint aiPack, uint bagId, uint teamId, uint factionRank, uint factionMode, bool isMob, uint level) from "utils";
import Critter@ AddNpc(Map@ map, uint16 pid, uint16 x, uint16 y, uint8 dir, array<int> params, uint dialogId, string& script, uint aiPack, uint bagId, uint teamId, bool isMob, uint level) from "utils";
import Critter@ AddNpc(Map@ map, uint16 pid, uint16 x, uint16 y, uint8 dir, array<int> params, uint dialogId, string& script, uint aiPack, uint bagId, uint teamId, uint factionRank, uint factionMode, bool isMob, uint level) from "utils";
import void     AddScore(Critter@ cr, uint score, uint points) from "utils";

import bool  ReloadWeapon(Critter& cr) from "utils";
import Item@ GetRadio(Critter& cr) from "utils";
import Item@ GetRepairTool(Critter& cr) from "utils";
import Item@ GetEquippedItem(Critter& cr, uint Pid) from "utils";
import Item@ GetEquippedItem(Critter& cr, array<uint>& Pids) from "utils";
import Item@ GetEquippedItemByType(Critter& cr, uint ItemType) from "utils";
// deprecated, use map_tent.fos functions
// import Map@ GetTentMap(uint CritterId) from "utils";
import bool   SkillRoll(Critter@ cr, int skill, int bonus) from "utils";
import int    SkillCheck(Critter& cr, int skill, int skillused, Item@ item, int bonus) from "utils";
import string SkillName(uint8 skill) from "utils";
import void   ChangeCrTypeSafe(Critter& cr, uint16 crType) from "utils";

import bool Pickable(Item@ item) from "utils";

import void TransferItemsToContOnMap(Critter& cr, Map@ map, int entid, int contpid, int itemtypes) from "utils";
import void TransferItemsFromContOnMap(Critter& cr, Map@ map, int entid, int contpid) from "utils";

import string IpToString(uint ip) from "utils";

import void VerboseAction(Critter& cr, string& text) from "utils";
import void VerboseAction(Critter& cr, Critter& target, string& text) from "utils";
import void VerboseExperience(Critter& cr, int xpDiff, int levelDiff) from "utils";

import void SetChosenActions(Critter& cr, array<int>& actions) from "utils";

import void HexLine(uint16 x0, uint16 y0, uint16 x1, uint16 y1, array<uint16>@ xList, array<uint16>@ yList) from "utils";
import void HexCircle(uint16 x0, uint16 y0, uint16 radius, array<uint16>@ xList, array<uint16>@ yList) from "utils";

import bool FindPreferredGridApprox(Map& map, uint16& hx, uint16& hy) from "utils";

# include "strtoint_h.fos"

// utils_for_array
// TODO: deprecate, use built-in array<T> functions
import int  FindInArray(array<int>& arr, int value) from "utils";
import int  FindInArray(array<uint>& arr, uint value) from "utils";
import int  FindInArray(array<uint16>& arr, uint16 value) from "utils";
import int  FindInArray(array<uint8>& arr, uint8 value) from "utils";
import bool FindInArray(array<int>& arr, int id, int& index) from "utils";
import bool FindInArray(array<uint>& arr, uint id, int& index) from "utils";
import bool FindInArray(array<uint8>& arr, uint8 id, int& index) from "utils";
import int  FindInArray(array<string>& arr, string& value) from "utils";
import int  FindInArray(array<string@>@ arr, string& value) from "utils";
import bool Present(int what, array<int>& where) from "utils";
import bool Present(uint what, array<uint>& where) from "utils";
import bool Present(uint16 what, array<uint16>& where) from "utils";
import bool Present(string& what, array<string>& where) from "utils";
import bool Present(string& what, array<string@>@ where) from "utils";

import uint CreateLocationForGroup(Critter& player, uint16 pid, uint16 worldX, uint16 worldY, array<Critter@>&) from "utils";
import bool FindFirstFreeHex(Map@ map, uint16& x, uint16& y, uint8 dir, uint16 maxSteps) from "utils";
import bool FindNearestFreeHex(Map& map, uint16& x, uint16& y, uint radius) from "utils";

import bool GetItemCoordinates(Item& item, uint& mapID, uint16& x, uint16& y) from "utils";
import bool ItemOnHex(uint16 pid, Map@ map, uint16 x, uint16 y) from "utils";

import void PrintCallstack() from "utils";
import void PrintCallstack(int level) from "utils";

import bool LocationHasCritters(Location& loc, uint findType) from "utils";
import uint LocationGetCritters(Location& loc, uint findType, array<Critter@>@ critters) from "utils";
import bool LocationHasItems(Location& loc, uint16 protoId) from "utils";
import uint LocationGetItems(Location& loc, uint16 protoId, array<Item@>@ items) from "utils";
import void LocationDeleteItems(Location& loc, uint16 protoId) from "utils";

import bool IsDisposableEncounter(Location@ loc) from "utils";
#endif

shared class CPosition
{
    uint x;
    uint y;
    uint dir;
};

shared interface IRect
{
    bool IsWithin(Critter& cr);
};

shared class Rect : IRect
{
    uint x1;
    uint y1;
    uint x2;
    uint y2;

    Rect(uint x1, uint y1, uint x2, uint y2)
    {
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
    }

    bool IsWithin(Critter& cr)
    {
        return((cr.HexX >= this.x1 && cr.HexX <= this.x2) && (cr.HexY >= this.y1 && cr.HexY <= this.y2));
    }
};

shared interface IDateTime
{
    uint16  get_Year();
    uint16  get_Month();
    uint16  get_DayOfWeek();
    uint16  get_Day();
    uint16  get_Hour();
    uint16  get_Minute();
    uint16  get_Second();
    uint16  get_Milliseconds();
    string@ ToString();
};

#pragma bindfunc "void string::ParseFloat(float,uint8) -> Utils.dll String_ParseFloat"

// LocationEx
#pragma bindfunc "bool Location::IsEncounter() -> Utils.dll Location_IsEncounter"
#pragma bindfunc "bool Location::IsTown() -> Utils.dll Location_IsTown"
#pragma bindfunc "bool Location::IsCityEncounter() -> Utils.dll Location_IsCityEncounter"
#pragma bindfunc "bool Location::IsInstancedQuest() -> Utils.dll Location_IsInstancedQuest"
#pragma bindfunc "bool Location::IsBase() -> Utils.dll Location_IsBase"
#pragma bindfunc "bool Location::IsReplication() -> Utils.dll Location_IsReplication"
#pragma bindfunc "bool Location::IsTCTown() -> Utils.dll Location_IsTCTown"
#pragma bindfunc "bool Location::IsTent() -> Utils.dll Location_IsTent"
#pragma bindfunc "bool Location::IsCave() -> Utils.dll Location_IsCave"
#pragma bindfunc "bool Location::IsMine() -> Utils.dll Location_IsMine"
#pragma bindfunc "bool Location::IsGuarded() -> Utils.dll Location_IsGuarded"
#pragma bindfunc "bool Location::IsPublic() -> Utils.dll Location_IsPublic"

#pragma bindfunc "void Location::ProtoName(string& result) -> Utils.dll Location_ProtoName"

#pragma bindfunc "bool Map::FindNearestGrid(uint16&,uint16&,uint16) -> Utils.dll Map_FindNearestGrid"
#pragma bindfunc "bool Map::FindNearestGrid(uint16&,uint16&,uint16,uint) -> Utils.dll Map_FindNearestGridEntire"
#pragma bindfunc "bool Map::FindRandomGrid(uint16&,uint16&,uint16,uint) -> Utils.dll Map_FindRandomGridEntire"
#pragma bindfunc "bool Map::FindNearestGridApprox(uint16&,uint16&,bool) -> Utils.dll Map_FindNearestGridApprox"
// #pragma bindfunc "bool Map::FindNearestGridRough(uint16&,uint16&,bool) -> Utils.dll Map_FindNearestGridRough"
// #pragma bindfunc "void Map::GetGrids(array<uint16>&) -> Utils.dll Map_GetGrids"
#pragma bindfunc "bool Map::IsGrid(uint16,uint16) -> Utils.dll Map_IsGrid"
#pragma bindfunc "int16 Map::GetGridDirection(uint16,uint16) -> Utils.dll Map_GetGridDirection"

#pragma bindfunc "void Map::ProtoName(string& result) -> Utils.dll Map_ProtoName"

#pragma bindfunc "bool Critter::ClearExtEvents()           -> Utils.dll Critter_ClearExtEvents"
#pragma bindfunc "bool Critter::SetEventExt(int, string@+) -> Utils.dll Critter_SetEventExt"
#pragma bindfunc "bool Critter::EventExtMapIn(Map&)        -> Utils.dll Critter_EventExtMapIn"
#pragma bindfunc "bool Critter::EventExtMapOut(Map&)       -> Utils.dll Critter_EventExtMapOut"
#endif // __UTILS__
