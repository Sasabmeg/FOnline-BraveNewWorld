//
// FOnline: 2238
// Rotators
//
// parameters.fos
//

#include "_macros.fos"
#include "MsgStr.h"
# include "_defines.fos"
#include "lexems_h.fos"
# include "_msgstr.fos"

#ifdef __CLIENT
# include "_client_defines.fos"
# include "client_utils_h.fos"

import void   SetChosenTabLevelUp(bool enable)  from "chosen_tabs";
import string critter_description(CritterCl& cr, int lookType) from "client_interface";
import int    GUI_GetActiveScreen() from "client_gui";
#endif

#ifdef __SERVER
# include "logging_h.fos"
//#include "utils_h.fos"


import Critter@ GetMaster(Critter& follower) from "follower";
import void     PerkUp(Critter& cr, uint perk, int from) from "perks";
import void     PerkDown(Critter& cr, uint perk, int tolevel) from "perks";
import bool     IsHumanoid(Critter@ cr) from "utils";
import void     VerboseExperience(Critter& cr, int xpDiff, int levelDiff) from "utils";
import void 	AddScore(Critter@ cr, uint score, uint points) from "utils";
import void     GreetPlayer(Critter@ player, Map@ map) from "map_greet";
//import void     FloatingMiscText(Critter& cr, int value, int reason) from "utils";


int getParamDialog_Reputation(Critter@ master, Critter@ slave, uint index)
{
    if(!valid(master))
        return 0;
    if(valid(slave) && master.Perk[PE_SEX_APPEAL] != 0 && master.Stat[ST_GENDER] != slave.Stat[ST_GENDER])
        return MAX(master.Param[index], 250);
    return master.Param[index];
}

void changedParam_Hp(Critter& cr, uint, int oldValue)   // server
{
    int curHp = cr.StatBase[ST_CURRENT_HP];
    if(curHp <= 0 && cr.IsLife())
        cr.StatBase[ST_CURRENT_HP] = 1;
    if(cr.Perk[PE_DEAD_MAN_WALKING] != 0)
    {
        if(curHp < __DeadHitPoints && !cr.IsDead())
            cr.StatBase[ST_CURRENT_HP] = __DeadHitPoints + 1;
    }
    else if(curHp < __DeadHitPoints && !cr.IsDead())
        cr.StatBase[ST_CURRENT_HP] = __DeadHitPoints / 2 + 1;
    int maxHp = cr.Stat[ST_MAX_LIFE];
    if(curHp > maxHp)
    {
        cr.StatBase[ST_CURRENT_HP] = maxHp;
        curHp = maxHp;
    }
    /* set health level */

    if(cr.IsDead())
        cr.StatBase[ST_HEALTH_LEVEL] = -1024;
    else if(curHp == maxHp)
        cr.StatBase[ST_HEALTH_LEVEL] = 4;
    else
        cr.StatBase[ST_HEALTH_LEVEL] = (3 * curHp) / maxHp + 1;

}

void changedParam_Reputation(Critter& cr, uint reputationParamId, int oldValue) {  // server
    if (!cr.IsPlayer())
        return;
    int newValue = cr.ParamBase[reputationParamId];
    int change = newValue - oldValue;
    if (change == 0)
        return;
    //  reputation changed over threshold
    int oldIndex = STR_TOWNREP_RATIO_NAME2(oldValue);
    int newIndex = STR_TOWNREP_RATIO_NAME2(newValue);
    //cr.Say(SAY_NETMSG, "SERVER ---- Reputation threshold changed for faction: (oldIndex = " + oldIndex + ", newIndex = " + newIndex + ")");
    if (oldIndex != newIndex) {
        GreetPlayer(cr, cr.GetMap());
    }
}

void changedParam_Experience(Critter& cr, uint, int oldValue)   // server
{
    if(cr.StatBase[ST_EXPERIENCE] < 0)
    {
        cr.StatBase[ST_EXPERIENCE] = 0;
        cr.Say(SAY_NETMSG, "|0xFFFFFF You have lost " + oldValue + " experience points.");
        return;
    }

    int exp = cr.StatBase[ST_EXPERIENCE] - oldValue;
    int levelDiff = 0;

    if(exp < 0) {
        cr.Say(SAY_NETMSG, "|0xFFFFFF You have lost " + (exp*(-1)) + " experience points.");
        //FloatingMiscText(cr, exp, MISC_TEXT_REASON_XP);
    }

    if(exp > 0)
    {
        exp *= __ExperienceMod;
        exp += exp * ((cr.Perk[PE_SWIFT_LEARNER] + cr.Trait[TRAIT_LONER]) * 10) / 100;   // SwiftLearner perk
        uint level = cr.Stat[ST_LEVEL], oldLevel = level;
        //if(level >= __LevelCap && !__LevelCapAddExperience)
        //   return;

        cr.StatBase[ST_EXPERIENCE] = oldValue + exp;
        //FloatingMiscText(cr, exp, MISC_TEXT_REASON_XP);

        if(level >= __LevelCap)
        {
            if(_IsFollower(cr))
			{
                VerboseExperience(cr, exp, 0);
                return;
			}
        }

        int perkUp = (cr.Trait[TRAIT_SKILLED] != 0 ? 4 : 3);
        while(true)
        {
            if(cr.StatBase[ST_EXPERIENCE] >= NextLevelNeedExp(cr))
            {
                level++;
                cr.StatBase[ST_LEVEL]++;
				AddScore(cr, SCORE_RITCH, 1);

                 // Czwarty tag skill
                //  if(cr.Stat[ST_LEVEL]==12) cr.StatBase[ST_UNSPENT_TAG]=1;    BNW 2024.08.27 - I don't know why was this even here, it doesn't work anymore?

                //  cr.StatBase[ST_UNSPENT_SKILL_POINTS] += 5 + cr.StatBase[ST_INTELLECT] * 2; // Skill points, changed to static in BNW to allow mutation
                if (level < 31) {
                    cr.StatBase[ST_UNSPENT_SKILL_POINTS] += 17;
                } else {
                    cr.StatBase[ST_UNSPENT_SKILL_POINTS] += 9;
                }

                //  BNW: removed skilled trait, it is being never use, noone takes skill points over perks and would messes with mutation feature later.
                //if(cr.Trait[TRAIT_SKILLED] != 0)
                //    cr.StatBase[ST_UNSPENT_SKILL_POINTS] += 5;                             // Skilled trait
                // if(cr.Trait[TRAIT_GIFTED]!=0) cr.StatBase[ST_UNSPENT_SKILL_POINTS]-=5; // Gifted trait
                //  cr.StatBase[ST_UNSPENT_SKILL_POINTS] += cr.Perk[PE_EDUCATED] * 2;          // Educated perk, effect removed in BNW to allow Mutation
                if(cr.StatBase[ST_UNSPENT_SKILL_POINTS] > 99)
                    cr.StatBase[ST_UNSPENT_SKILL_POINTS] = 99;                             // Clamp skill points

				if (level <= __LevelCap) {
                    int enduranceBonus = 30 + cr.StatBase[ST_ENDURANCE];
                    cr.StatBase[ST_MAX_LIFE] += enduranceBonus / 8;                 // Add max hp

                    if ((level % 8 != 0) && (level % 8 <= enduranceBonus % 8)) {
                        cr.StatBase[ST_MAX_LIFE] += 1;  // Add additional 1 HP when odd EN numbers, so minimal max HP difference between EN 9 and EN 10
                    }

                    if((level % perkUp) == 0) {
                        cr.StatBase[ST_UNSPENT_PERKS] = 1;
                    }
				}
				if((level > 24) && (level < 30) && cr.StatBase[ST_UNSPENT_PERKS]!=0)
                    cr.Say(SAY_NETMSG, "|0xCC0000 Remember to choose your Perk! If you don't do that until level 30, it will be lost!");
				if(level==30) cr.StatBase[ST_UNSPENT_PERKS]=0;
            }
            else
                break;
        }
        levelDiff = level - oldLevel;
    }

    if(_IsFollower(cr))
        VerboseExperience(cr, exp, levelDiff);
}

void changedParam_Level(Critter& cr, uint a, int oldLevel)   // server
{
    //if(cr.IsPlayer())
    //{
    //    if(cr.Stat[ST_LEVEL] == int(__LevelCap) && cr.GetScore(SCORE_ZOMBY) == 0)
    //        AddAchievement(cr, ACHIEVEMENT_MAN_OF_STEEL);
    //    return;
    //}

    if(!_IsFollower(cr))
        return;
    else
    {
        Critter@ master = GetMaster(cr);
		if(valid(master) && IsLexem(cr, LEXEM_CRITTER_NAME))
			master.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_FOLLOWER_GAIN_LEVELUP, LEXEM_CRITTER_NAME + GetLexem(cr, LEXEM_CRITTER_NAME));
    }

    if(cr.Param[ST_DIALOG_ID] == 0)       // JIC
        return;

    cr.SayMsg(SAY_SOCIAL, TEXTMSG_DLG, DLGSTR(cr.Param[ST_DIALOG_ID], STR_FOLLOWER_LEVELUP));
}

void changedParam_Perks(Critter& cr, uint perk, int oldValue)   // server
{
    int curValue = cr.Param[perk];
    if(curValue > oldValue)
        for(int i = oldValue; i < curValue; i++)
            PerkUp(cr, perk, i);
    else if(curValue < oldValue)
        for(int i = oldValue - 1; i >= curValue; i--)
            PerkDown(cr, perk, i);

    if(oldValue != curValue && cr.IsPlayer())
        FLog(LOG_PERKS, cr.Name + "(" + cr.Id + ") changing perk " + perk + " value: " + oldValue + " -> " + curValue);
}

void changedParam_Hide(Critter& cr, uint, int oldValue)   // server
{
	int alpha = 0xFF;

	if( cr.Mode[MODE_HIDE] > 0 )
	{
		alpha = 180 - (50*cr.Skill[SK_SNEAK])/270 - 40*cr.Perk[PE_GHOST];
	}

	cr.StatBase[ST_ALPHA] = CLAMP( alpha, 0, 255 );
	cr.RefreshVisible();
}

void changedParam_FastShot(Critter& cr, uint, int oldValue)   // server
{
    cr.ModeBase[MODE_NO_AIM] = (cr.Trait[TRAIT_FAST_SHOT] != 0 ? 1 : 0);
}


int NextLevelNeedExp(Critter& cr)   // Export
{
    int level = cr.Stat[ST_LEVEL];
    return NUMERICAL_NUMBER(level) * 1000;
}

#endif

#ifdef __CLIENT
void changedParam_Alpha( CritterCl& cr, uint, int ) // client
{
	cr.Alpha = CLAMP( cr.Stat[ST_ALPHA], 0, 255 );
}

void changedParam_Level(CritterCl& cr, uint, int oldValue)   // client
{
    CritterCl@ chosen = GetChosen();
    if(!valid(chosen) || chosen.Id != cr.Id)
      return;

    if(cr.ParamBase[ST_LEVEL] > oldValue)
    {
        PlaySound("LEVELUP.ACM");
        Message(TEXTMSG_GAME, STR_GAIN_LEVELUP, MSGBOX_GAME);
        SetChosenTabLevelUp(true);
    }
}

void changedParam_Reputation(CritterCl& cr, uint reputationParamId, int oldValue) {  // client
    //  Message("Name  = " + cr.Name + ", reputationParamId = " + reputationParamId + ", oldValue = " + oldValue + ", newValue = " + cr.ParamBase[reputationParamId]);
    int newValue = cr.ParamBase[reputationParamId];
    int change = newValue - oldValue;
    if (change == 0)
        return;
    int factionNameMsgId = 100000 + ((reputationParamId) * 10) + 1;
    string factionName = GetMsgStr(TEXTMSG_GAME, factionNameMsgId);
    int oldIndex = STR_TOWNREP_RATIO_NAME2(oldValue);
    int newIndex = STR_TOWNREP_RATIO_NAME2(newValue);
    string newReputationValueName = GetMsgStr(TEXTMSG_GAME, newIndex);
    string repStatus = "";
    // repu changes from vilified to idolized (2024.06.29): -1499, -899, -299, 300, 900, 1500
    switch (newIndex) {
        case 6500:
            repStatus = "|0x00EE00 " + newReputationValueName;
            break;
        case 6501:
            repStatus = "|0x009900 " + newReputationValueName;
            break;
        case 6502:
            repStatus = "|0x007700 " + newReputationValueName;
            break;
        case 6503:
            repStatus = "|0xEEEEEE " + newReputationValueName;
            break;
        case 6504:
            repStatus = "|0xAAAA00 " + newReputationValueName;
            break;
        case 6505:
            repStatus = "|0xEA4600 " + newReputationValueName;
            break;
        case 6506:
            repStatus = "|0xFF0000 " + newReputationValueName;
            break;
        default:
            repStatus = "|0xEEEEEE N/A";
    }
    if (change > 0) {
        if (oldIndex == newIndex) {
            Message("|0x4DA996 You have gained |0x00C800 " + change + " |0x4DA996 reputation points with |0xEEEEEE " + factionName + "|0x4DA996 .");
        } else {
            Message("|0x4DA996 You have gained |0x00C800 " + change + " |0x4DA996 reputation points with |0xEEEEEE " + factionName + "|0x4DA996  and their status towards you changed to " + repStatus + "|0x4DA996 .");
        }
    } else {
        if (oldIndex == newIndex) {
            Message("|0x4DA996 You have lost |0xEA4600 " + (change * -1) + " |0x4DA996 reputation points with |0xEEEEEE " + factionName + "|0x4DA996 .");
        } else {
            Message("|0x4DA996 You have lost |0xEA4600 " + (change * -1) + " |0x4DA996 reputation points with |0xEEEEEE " + factionName + "|0x4DA996  and their status towards you changed to " + repStatus + "|0x4DA996 .");
        }
    }
}

void changedParam_Experience(CritterCl& cr, uint, int oldValue)   // client
{
    int curValue = cr.ParamBase[ST_EXPERIENCE];
    if(curValue > oldValue) {
        Message(ReplaceText(GetMsgStr(TEXTMSG_GAME, STR_GAIN_EXPERIENCE), "VALUE", curValue - oldValue), MSGBOX_GAME);
    }
    FloatingMiscText(curValue - oldValue, MISC_TEXT_REASON_XP);

}

void changedParam_UnspentPerks(CritterCl& cr, uint, int oldValue)   // client
{
    if(cr.ParamBase[ST_UNSPENT_PERKS] > 0 && GUI_GetActiveScreen() == CLIENT_SCREEN_CHARACTER)
        ShowScreen(CLIENT_SCREEN_PERK, 0, 0, 0);
}

void changedParam_UnspentTag(CritterCl& cr, uint, int oldValue)   // client
{

}

void changedParam_Hide(CritterCl& cr, uint, int oldValue)   // client
{
    critter_description(cr, CRITTER_LOOK_NAME);
}
#endif

#ifndef __CLIENT
int GetMaxLife(Critter& cr)
{
    int val = cr.StatBase[ST_MAX_LIFE] + cr.StatBase[ST_MAX_LIFE_EXT] + cr.StatBase[ST_STRENGTH] + cr.StatBase[ST_ENDURANCE] * 2;
    return CLAMP(val, 1, 9999);
}
#endif

// Parameters generation
// For server and client
// Both generation need be equal
// Input for player: 7 special, 3 tag skills, 2 traits, age, gender
// Imput for npc: data from prototype

const int[] PassiveSkills = { SK_SCAVENGING, SK_REPAIR, SK_SCIENCE, SK_LOCKPICK, SK_STEAL, SK_OUTDOORSMAN, SK_SPEECH, SK_BARTER, SK_GAMBLING };

bool IsPassiveSkill( int skill )
{
	return( PassiveSkills.find( skill ) >= 0 );
}

#ifndef __CLIENT
# define _param_    cr.ParamBase
void CritterGenerate(Critter& cr)   // Export to main@critter_init
#endif
#ifdef __CLIENT
# define _param_    data
void CritterGenerate(array<int>& data)     // Export to client_main@player_data_generate
#endif
{
    if(_param_[ST_LEVEL] == 0)
        _param_[ST_LEVEL] = 1;

    if(_param_[TRAIT_BRUISER] != 0)
        _param_[ST_STRENGTH] += 4;
    /*if(_param_[TRAIT_GOOD_NATURED]!=0)
       {
            _param_[SK_FIRST_AID]+=15;
            _param_[SK_DOCTOR]+=15;
            _param_[SK_SPEECH]+=15;
            _param_[SK_BARTER]+=15;
            _param_[SK_SMALL_GUNS]-=10;
            _param_[SK_BIG_GUNS]-=10;
            _param_[SK_ENERGY_WEAPONS]-=10;
            _param_[SK_UNARMED]-=10;
            _param_[SK_THROWING]-=10;
       }*/
    // if(_param_[TRAIT_GIFTED]!=0)
    // {
    //	for(uint i=ST_STRENGTH;i<=ST_LUCK;i++) _param_[i]++;
    //	for(uint i=SKILL_BEGIN;i<=SKILL_END;i++) _param_[i]-=10;
    // }

    _param_[SK_SMALL_GUNS] += 5 + 4 * _param_[ST_AGILITY];
    _param_[SK_BIG_GUNS] += 0 + 2 * _param_[ST_AGILITY];
    _param_[SK_ENERGY_WEAPONS] += 0 + 2 * _param_[ST_AGILITY];
    _param_[SK_UNARMED] += 30 + 2 * (_param_[ST_AGILITY] + _param_[ST_STRENGTH]);
//  _param_[SK_SCAVENGING] += 20 + 2 * (_param_[ST_AGILITY] + _param_[ST_STRENGTH]);
	_param_[SK_SCAVENGING] = 0;
    _param_[SK_THROWING] += 0 + 4 * _param_[ST_AGILITY];
    _param_[SK_FIRST_AID] += 0 + 2 * (_param_[ST_PERCEPTION] + _param_[ST_INTELLECT]);
    _param_[SK_DOCTOR] += 5 + _param_[ST_PERCEPTION] + _param_[ST_INTELLECT];
    _param_[SK_SNEAK] += 5 + 3 * _param_[ST_AGILITY];
    _param_[SK_LOCKPICK] += 10 + _param_[ST_PERCEPTION] + _param_[ST_AGILITY];
    _param_[SK_STEAL] += 0 + 3 * _param_[ST_AGILITY];
    _param_[SK_TRAPS] += 10 + _param_[ST_PERCEPTION] + _param_[ST_AGILITY];
    _param_[SK_SCIENCE] += 0 + 3 * _param_[ST_INTELLECT];
    _param_[SK_REPAIR] += 0 + 2 * _param_[ST_INTELLECT];
    _param_[SK_SPEECH] += 0 + 5 * _param_[ST_CHARISMA];
    _param_[SK_BARTER] += 0 + 4 * _param_[ST_CHARISMA];
    _param_[SK_GAMBLING] += 0 + 5 * _param_[ST_LUCK];
    _param_[SK_OUTDOORSMAN] += 0 + 2 * (_param_[ST_ENDURANCE] + _param_[ST_INTELLECT]);

    if(_param_[TAG_SKILL1] != 0)
        _param_[_param_[TAG_SKILL1]] += 20;
    if(_param_[TAG_SKILL2] != 0)
        _param_[_param_[TAG_SKILL2]] += 20;
    if(_param_[TAG_SKILL3] != 0)
        _param_[_param_[TAG_SKILL3]] += 20;

    if(_param_[TRAIT_BRUISER] != 0)
        _param_[ST_ACTION_POINTS] -= 2;
    if(_param_[TRAIT_KAMIKAZE] != 0)
    {
        for(uint i = ST_NORMAL_RESIST; i <= ST_EXPLODE_RESIST; i++)
            _param_[i] -= 10;
    }
    if(_param_[TRAIT_FINESSE] != 0)
        _param_[ST_CRITICAL_CHANCE] += 10;
    if(_param_[TRAIT_FAST_SHOT] != 0)
        _param_[MODE_NO_AIM] = 1;
    if(_param_[TRAIT_BONEHEAD] != 0)
        _param_[ST_INTELLECT] -= 1;

    #ifdef __CLIENT
    // Runtime calculations, only for client registration
    _param_[ST_ARMOR_CLASS] += 3 * _param_[ST_AGILITY];
    _param_[ST_MAX_LIFE] += _param_[ST_STRENGTH] * 2 + _param_[ST_ENDURANCE] + 40;
    _param_[ST_ACTION_POINTS] += (13 + _param_[ST_AGILITY]) / 4;
    _param_[ST_CARRY_WEIGHT] += LBS_TO_GRAMM(25 + _param_[ST_STRENGTH] * 25)+20000;
    _param_[ST_MELEE_DAMAGE] += (_param_[ST_STRENGTH] > 6 ? (_param_[TRAIT_BRUISER] > 0 ? 2 * (_param_[ST_STRENGTH] - 5) : (_param_[ST_STRENGTH] - 5)) : 1);
    _param_[ST_POISON_RESISTANCE] += _param_[ST_ENDURANCE] * 3;
    _param_[ST_RADIATION_RESISTANCE] += _param_[ST_ENDURANCE] * 2;
    _param_[ST_SEQUENCE] += _param_[ST_PERCEPTION] * 2 + 2;
    _param_[ST_HEALING_RATE] += 7 + _param_[ST_ENDURANCE] / 2;
    //if(_param_[TRAIT_FAST_METABOLISM] != 0)
    //    _param_[ST_HEALING_RATE] += (_param_[ST_ENDURANCE] + 1) / 2;
    _param_[ST_CRITICAL_CHANCE] += _param_[ST_LUCK];
    #endif

    _param_[ST_MAX_LIFE] += 15;
    _param_[ST_ACTION_POINTS] += 5;
    _param_[ST_CURRENT_HP] = _param_[ST_MAX_LIFE];
    _param_[ST_CURRENT_AP] = _param_[ST_ACTION_POINTS] * 100;

    _param_[ST_HEALTH_LEVEL] = 4;
    #ifdef __SERVER
    if(IsHumanoid(cr))
        cr.StatBase[ST_MAX_LIFE] += 40;
    #endif
}

#ifdef __CLIENT
# include "MsgStr.h"
// Check valid of input data
bool CritterGenerateCheck(array<int>& data)     // Export to client_main@player_data_check
{
    // Check special
    int special = 0;
    for(uint i = ST_STRENGTH; i <= ST_LUCK; i++)
    {
		if(data[i] < 1 || data[i] > 10)
        {
            Message(GetMsgStr(TEXTMSG_GAME, STR_NET_WRONG_SPECIAL));
            return false;
        }
        special += data[i];
    }
	if ((data[ST_STRENGTH]>6 && data[TRAIT_BRUISER]!=0) ||
        (data[ST_INTELLECT]==1 && data[TRAIT_BONEHEAD]!=0))
		{
			Message("|0xC85050 Incorrect SPECIAL data.");
			return false;
		}
    /*
    if (data[TRAIT_GIFTED] != 0) {
        for (int i = TRAIT_BEGIN; i <= TRAIT_END; i++)
            if (TRAIT_GIFTED != i && data[i] != 0) {
                Message("|0xC85050 Incorrect TRAIT selection. Gifted trait cannot be selected with other Traits.");
                return false;
            }
        }
    }
    */

    if(special != __StartSpecialPoints)
    {
        Message(GetMsgStr(TEXTMSG_GAME, STR_NET_WRONG_SPECIAL));
        return false;
    }
    // Check choosed tag skills
    if((data[TAG_SKILL1] < int(SKILL_BEGIN) || data[TAG_SKILL1] > int(SKILL_END)) ||
       (data[TAG_SKILL2] < int(SKILL_BEGIN) || data[TAG_SKILL2] > int(SKILL_END)))
    {
        Message(GetMsgStr(TEXTMSG_GAME, STR_NET_WRONG_TAGSKILL));
        return false;
    }

	for( uint t=TAG_SKILL1; t<=TAG_SKILL4; t++ )
	{
		if( IsPassiveSkill( _param_[t] ))
		{
			Message( "|0xC85050 Incorrect tag skill: |0xFF0000 " + GetMsgStr( TEXTMSG_GAME, STR_PARAM_NAME( _param_[t] )) + ". |0xC85050 Passive skills cannot be tagged and they will level up by related books or activities." );
			return( false );
		}
	}
    return true;
}
#endif

#ifndef __CLIENT
void NpcProcessLevel(Critter& npc)   // Export
{
    int level = npc.Stat[ST_LEVEL];
    if(level == 0)
        return;
    level--; // number of levelups is one less
    npc.StatBase[ST_MAX_LIFE] += (GetMaxLife(npc) * level) / 20;
    npc.StatBase[ST_CURRENT_HP] = npc.Stat[ST_MAX_LIFE];
    for(uint i = SKILL_BEGIN; i <= SKILL_END; i++)
        npc.SkillBase[i] += (npc.Skill[i] * level) / 20;
}
// backward compatibility
void NpcSetLevel(Critter& npc, int level)   // export
{
    int oldlevel = npc.Stat[ST_LEVEL];
    npc.StatBase[ST_LEVEL] = level;
    level -= oldlevel;
    npc.StatBase[ST_MAX_LIFE] += (2 + (npc.StatBase[ST_ENDURANCE] >> 1)) * level;
    npc.StatBase[ST_CURRENT_HP] = npc.Stat[ST_MAX_LIFE];
    for(uint i = SKILL_BEGIN; i <= SKILL_END; i++)
        npc.SkillBase[i] += 5 * level;
}
#endif

uint CheckPlayerName( const string& name )
{
    // Length
    if( name.length() < __MinNameLength || name.length() > __MaxNameLength )
        return STR_NET_LOGINPASS_WRONG;

    // Valid letters
    string allLetters = __ValidNameLettersCommon + __ValidNameLettersCulture1 + __ValidNameLettersCulture2;
    for( uint i = 0, j = name.length(); i < j; i++ )
        if( findFirst( allLetters, name[ i ] ) == -1 )
            return STR_NET_PASS_WRONG_CHARS;

    // Spaces
    if( name[ 0 ] == " " || name[ -1 ] == " " )
        return STR_NET_BEGIN_END_SPACES;
    for( int i = 0, j = name.length() - 1; i < j; i++ )
        if( name[ i ] == " " && name[ i + 1 ] == " " )
            return STR_NET_TWO_SPACE;

    // Different cultures
    uint letters1 = 0;
    uint letters2 = 0;
    for( int i = 0, j = name.length() - 1; i < j; i++ )
    {
        if( findFirst( __ValidNameLettersCulture1, name[ i ] ) != -1 )
            letters1++;
        else if( findFirst( __ValidNameLettersCulture2, name[ i ] ) != -1 )
            letters2++;
    }
    if( letters1 > 0 && letters2 > 0 )
        return STR_NET_DIFFERENT_LANG;

    // Too many common symbols
    if( ( letters1 + letters2 ) * 100 / name.length() < 70 )
        return STR_NET_MANY_SYMBOLS;

    // All fine, return zero
    return 0;
}

bool Critter_IsOverweight(CritterMutual& cr)
{
#ifdef __DEBUG
	uint maxWeight = cr.Stat[ST_CARRY_WEIGHT];
	uint curWeight = cr.ItemsWeight();

#ifdef __CLIENT
	Log( curWeight+" > "+maxWeight+" = "+(maxWeight > maxWeight) );
#endif

	return( curWeight > maxWeight );
#endif
#ifndef __DEBUG
	return( cr.ItemsWeight() > uint(cr.Stat[ST_CARRY_WEIGHT]) );
#endif
}

#endif
